name: Build and Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - "infrastructure/**"
      - ".github/workflows/infrastructure.yml"
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: pipelineinvaders
  REPOSITORY: marc-mueller/pipelineinvaders

jobs:
  build:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build the web app
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/buildcontainerwebapp
        with:
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ env.REPOSITORY }}
          tag: ${{ github.sha }}
      - name: Build Docker image with tests
        run: |
          BUILD_ID=${{ github.run_id }}
          docker build --build-arg BUILDID=$BUILD_ID -t ${{ env.REPOSITORY }}:${{ github.sha }} .
      - name: Extract Jest test results
        run: |
          TEST_CONTAINER_ID=$(docker create ${{ env.REPOSITORY }}:${{ github.sha }})
          docker cp $TEST_CONTAINER_ID:/testresults/jest ./jest-test-results
          docker rm $TEST_CONTAINER_ID
      - name: Extract xUnit test results
        run: |
          TEST_CONTAINER_ID=$(docker create ${{ env.REPOSITORY }}:${{ github.sha }})
          docker cp $TEST_CONTAINER_ID:/testresults/xunit ./xunit-test-results
          docker rm $TEST_CONTAINER_ID
      - name: Publish Jest test results
        uses: actions/upload-artifact@v3
        with:
          name: jest-test-results
          path: ./jest-test-results
      - name: Publish xUnit test results
        uses: actions/upload-artifact@v3
        with:
          name: xunit-test-results
          path: ./xunit-test-results

  deploy-pr:
    runs-on: ubuntu-latest
    name: Deploy to PR Slot
    needs: [build]
    if: github.event_name == 'pull_request'
    environment: 
      name: pull-request
      url:  ${{ steps.deploywebapp.webAppUrl }}
    steps:
      - uses: actions/checkout@v4 # only needed because action is in same repo
      - uses: ./.github/actions/deploycontainerwebapp
        with:
          repository: ${{ env.REPOSITORY }}
          tag: ${{ github.sha }}
          webappname: ${{ env.AZURE_WEBAPP_NAME }}
          slotname: pr-${{github.event.number}}
          environmentname: 'pull-request'
          createSlot: true
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          azureResourceGroup: ${{ secrets.AZURE_RG }}
        id: deploywebapp

  deploy-testing:
    runs-on: ubuntu-latest
    name: Deploy to testing slot
    needs: [build]
    if: github.event_name != 'pull_request'
    environment: 
      name: testing
      url:  ${{ steps.deploywebapp.outputs.webAppUrl }}
    steps:
      - uses: actions/checkout@v4 # only needed because action is in same repo
      - uses: ./.github/actions/deploycontainerwebapp
        with:
          repository: ${{ env.REPOSITORY }}
          tag: ${{ github.sha }}
          webappname: ${{ env.AZURE_WEBAPP_NAME }}
          slotname: 'testing'
          environmentname: 'testing'
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          azureResourceGroup: ${{ secrets.AZURE_RG }}
        id: deploywebapp
          
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to production
    needs: [deploy-testing]
    environment: 
      name: production
      url:  ${{ steps.deploywebapp.outputs.webAppUrl }}
    steps:
      - uses: actions/checkout@v4 # only needed because action is in same repo
      - uses: ./.github/actions/deploycontainerwebapp
        with:
          repository: ${{ env.REPOSITORY }}
          tag: ${{ github.sha }}
          webappname: ${{ env.AZURE_WEBAPP_NAME }}
          slotname: 'production'
          environmentname: 'production'
          azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
          azureResourceGroup: ${{ secrets.AZURE_RG }}
        id: deploywebapp
          
  cleanup-pull-request:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Cleanup pull request
    steps:
      - name: Login for az cli commands 
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete Pull-Request slot
        shell: pwsh
        run: |
          az webapp deployment slot delete --resource-group ${{ secrets.AZURE_RG }} --name ${{ env.AZURE_WEBAPP_NAME }}-webapp --slot pr-${{github.event.number}}
